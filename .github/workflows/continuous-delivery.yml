name: Continuous Delivery

on:
  push:
    branches:
      - main
  pull_request:

defaults:
  run:
    shell: bash

jobs:
  push_readme:
    name: Push README to Docker hub
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - name: push README to Dockerhub
        uses: christian-korneck/update-container-description-action@v1
        env:
          DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASS: ${{ secrets.DOCKERHUB_TOKEN }}
        with:
          destination_container_repo: danonline/autopulse
          provider: dockerhub
          short_description: 'ðŸ’« bridge your media server'
          readme_file: 'README.md'
  
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run release-plz
        uses: MarcoIeni/release-plz-action@v0.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release_binaries:
    name: Release & Build / ${{ matrix.target }}
    if: github.event_name != 'pull_request'
    needs: release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: aarch64-unknown-linux-musl
            os: ubuntu-22.04
          - target: aarch64-apple-darwin
            os: macos-12
          - target: aarch64-pc-windows-msvc
            os: windows-2022
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: x86_64-unknown-linux-musl
            os: ubuntu-22.04
          - target: x86_64-apple-darwin
            os: macos-12
          - target: x86_64-pc-windows-msvc
            os: windows-2022
          - target: x86_64-unknown-freebsd
            os: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
        if: startsWith(matrix.os, 'ubuntu') && !contains(matrix.target, '-musl')

      - uses: taiki-e/install-action@cross
        if: contains(matrix.target, '-musl')

      - run: echo "RUSTFLAGS=${RUSTFLAGS} -C target-feature=+crt-static" >> "${GITHUB_ENV}"
        if: endsWith(matrix.target, 'windows-msvc')

      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: autopulse
          target: ${{ matrix.target }}
          tar: all
          zip: windows
          token: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull Request suffix
        run: |
          if [ -n "${{ github.event.number }}" ]; then
            echo "PR number: ${{ github.event.number }}"
            echo "tag=pr-${{ github.event.number }}" >> "$GITHUB_OUTPUT"
          else
            echo "Not a PR branch"
            echo "tag=latest" >> "$GITHUB_OUTPUT"
          fi
        id: tag

      - name: Build and push (full)
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: danonline/autopulse:${{ steps.tag.outputs.tag }}
          file: Dockerfile.alpine
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push (postgres)
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: danonline/autopulse:${{ steps.tag.outputs.tag }}-postgres
          file: Dockerfile.alpine
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENABLED_FEATURES=postgres

      - name: Build and push (sqlite)
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: danonline/autopulse:${{ steps.tag.outputs.tag }}-sqlite
          file: Dockerfile.alpine
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENABLED_FEATURES=sqlite

      # - name: Build and push (latest-ubuntu)
      #   uses: docker/build-push-action@v6
      #   with:
      #     push: true
      #     tags: danonline/autopulse:latest-ubuntu
      #     file: Dockerfile
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max